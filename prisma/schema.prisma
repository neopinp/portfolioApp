generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model assets {
  symbol      String    @id @db.VarChar(255)
  name        String?   @db.VarChar(255)
  sector      String?   @db.VarChar(255)
  beta        Decimal?  @db.Decimal
  riskRating  Decimal?  @map("risk_rating") @db.Decimal
  lastUpdated DateTime? @default(now()) @map("last_updated") @db.Timestamp(6)
  type        String
}

model holdings {
  id            Int        @id @default(autoincrement())
  portfolioId   Int        @map("portfolio_id")
  assetSymbol   String     @map("asset_symbol") @db.VarChar(10)
  amount        Decimal    @db.Decimal(12, 2)
  boughtAtPrice Decimal?   @map("bought_at_price") @db.Decimal(12, 2)
  createdAt     DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  boughtAtDate  DateTime?  @map("bought_at_date") 
  portfolio     portfolios @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model portfolio_snapshots {
  id                Int         @id @default(autoincrement())
  portfolioId       Int?        @map("portfolio_id")
  snapshotDate      DateTime?   @default(dbgenerated("CURRENT_DATE")) @map("snapshot_date") @db.Date
  totalValue        Decimal     @map("total_value") @db.Decimal
  dailyChange       Decimal?    @map("daily_change") @db.Decimal
  dailyChangePercent Decimal?   @map("daily_change_percent") @db.Decimal
  portfolio         portfolios? @relation(fields: [portfolioId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model portfolio_historical_performance {
  id            Int      @id @default(autoincrement())
  portfolioId   Int      @map("portfolio_id")
  date          DateTime @db.Date
  totalValue    Decimal  @map("total_value") @db.Decimal
  holdingsData  Json?    @map("holdings_data")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  portfolio     portfolios @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([portfolioId, date])
  @@index([portfolioId, date])
}

model portfolios {
  id                           Int                              @id @default(autoincrement())
  userId                       Int                              // Remove @map since column is already camelCase
  name                         String?                          @db.VarChar(100)
  createdAt                    DateTime?                        @default(now()) @map("created_at") @db.Timestamp(6)
  startingBalance              Decimal                          @default(0) @map("starting_balance") @db.Decimal
  riskScore                    Int                              @default(5) @map("risk_score")
  holdings                     holdings[]
  portfolioSnapshots           portfolio_snapshots[]
  portfolioHistoricalPerformance portfolio_historical_performance[]
  user                         users                            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id         Int          @id @default(autoincrement())
  email      String       @unique @db.VarChar(255)
  password   String       @db.VarChar(255)
  createdAt  DateTime?    @default(now()) @map("created_at") @db.Timestamp(6)
  username   String?      @unique
  portfolios portfolios[]
}
